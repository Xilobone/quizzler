// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quizzler.Data;

#nullable disable

namespace quizzler.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250719142441_QuestionTypeToJson")]
    partial class QuestionTypeToJson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Quizzler.Data.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("prompt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("QuestionType").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quizzler.Data.BinaryQuestion", b =>
                {
                    b.HasBaseType("Quizzler.Data.Question");

                    b.Property<bool>("answer")
                        .HasColumnType("INTEGER");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("answer")
                                .HasColumnName("BinaryQuestion_answer");
                        });

                    b.HasDiscriminator().HasValue("Binary");
                });

            modelBuilder.Entity("Quizzler.Data.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("Quizzler.Data.Question");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("options")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("answer")
                                .HasColumnName("MultipleChoiceQuestion_answer");
                        });

                    b.HasDiscriminator().HasValue("MultipleChoice");
                });

            modelBuilder.Entity("Quizzler.Data.NumericQuestion", b =>
                {
                    b.HasBaseType("Quizzler.Data.Question");

                    b.Property<float>("answer")
                        .HasColumnType("REAL");

                    b.Property<float>("lowerBound")
                        .HasColumnType("REAL");

                    b.Property<float>("upperbound")
                        .HasColumnType("REAL");

                    b.ToTable("Questions", t =>
                        {
                            t.Property("answer")
                                .HasColumnName("NumericQuestion_answer");
                        });

                    b.HasDiscriminator().HasValue("Numeric");
                });

            modelBuilder.Entity("Quizzler.Data.OpenQuestion", b =>
                {
                    b.HasBaseType("Quizzler.Data.Question");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Open");
                });
#pragma warning restore 612, 618
        }
    }
}
